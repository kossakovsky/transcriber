import fs from "fs";
import path from "path";
import os from "os";
import axios from "axios";
import FormData from "form-data";
import ffmpeg from "fluent-ffmpeg";
import ffmpegInstaller from "@ffmpeg-installer/ffmpeg";
import ffprobeInstaller from "@ffprobe-installer/ffprobe";

// Tell fluent-ffmpeg where to find the ffmpeg and ffprobe binaries
ffmpeg.setFfmpegPath(ffmpegInstaller.path);
ffmpeg.setFfprobePath(ffprobeInstaller.path);

// Load environment variables
import dotenv from "dotenv";
dotenv.config();

// --- Configuration ---

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_LIMIT_MB = 25; // OpenAI API limit in MB
const CHUNK_SIZE_MB = 20; // Target chunk size in MB (slightly less than the limit)
const MAX_FILE_SIZE = OPENAI_API_LIMIT_MB * 1024 * 1024;
const TARGET_CHUNK_SIZE_BYTES = CHUNK_SIZE_MB * 1024 * 1024;

// Folder paths
const VIDEO_DIR = "./video";
const AUDIO_DIR = "./audio";
const TEXT_DIR = "./text";

// Supported video formats
const VIDEO_EXTENSIONS = [".mp4", ".mov"];

// --- Helper Functions ---

/**
 * Get all video files from the video directory.
 * @returns {string[]} - Array of video file paths.
 */
function getVideoFiles() {
  if (!fs.existsSync(VIDEO_DIR)) {
    console.error(`‚ùå –ü–∞–ø–∫–∞ ${VIDEO_DIR} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    return [];
  }

  const files = fs.readdirSync(VIDEO_DIR);
  const videoFiles = files
    .filter((file) => {
      const ext = path.extname(file).toLowerCase();
      return VIDEO_EXTENSIONS.includes(ext);
    })
    .map((file) => path.join(VIDEO_DIR, file));

  return videoFiles;
}

/**
 * Extract audio from video file.
 * @param {string} videoPath - Path to video file.
 * @param {string} outputPath - Path for output audio file.
 * @returns {Promise<void>}
 */
function extractAudio(videoPath, outputPath) {
  return new Promise((resolve, reject) => {
    console.log(`    üé¨ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ ${path.basename(videoPath)}...`);
    ffmpeg(videoPath)
      .output(outputPath)
      .audioCodec("libmp3lame") // MP3 codec
      .format("mp3")
      .on("end", () => {
        console.log(`    ‚úÖ –ê—É–¥–∏–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${path.basename(outputPath)}`);
        resolve();
      })
      .on("error", (err) => {
        reject(
          new Error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ ${videoPath}: ${err.message}`
          )
        );
      })
      .run();
  });
}

/**
 * Get audio file metadata (duration, size).
 * @param {string} filePath - Path to the file.
 * @returns {Promise<object>} - Promise with metadata { duration, size }.
 */
function getAudioMetadata(filePath) {
  return new Promise((resolve, reject) => {
    ffmpeg.ffprobe(filePath, (err, metadata) => {
      if (err) {
        return reject(
          new Error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}: ${err.message}`
          )
        );
      }
      const duration = metadata.format.duration;
      const size = metadata.format.size;
      if (duration === undefined || size === undefined) {
        return reject(
          new Error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è ${filePath}`
          )
        );
      }
      resolve({ duration, size });
    });
  });
}

/**
 * Transcribe one small audio file (chunk).
 * @param {string} filePath - Path to audio file (or chunk).
 * @param {string} apiKey - OpenAI API key.
 * @returns {Promise<string>} - Promise with transcription text.
 */
async function transcribeChunk(filePath, apiKey) {
  const chunkFilename = path.basename(filePath);
  console.log(`    ‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ ${chunkFilename} –≤ OpenAI API...`);
  const formData = new FormData();
  formData.append("file", fs.createReadStream(filePath));
  formData.append("model", "whisper-1");
  formData.append("language", "ru");

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/audio/transcriptions",
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${apiKey}`,
        },
        timeout: 600000, // 10 minutes
      }
    );
    console.log(`    ‚úÖ –ß–∞–Ω–∫ ${chunkFilename} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω.`);
    return response.data.text;
  } catch (error) {
    console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ ${chunkFilename}:`);
    if (error.response) {
      console.error(`       - –°—Ç–∞—Ç—É—Å API: ${error.response.status}`);
      console.error(
        `       - –û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`
      );
    } else if (error.request) {
      console.error("       - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.");
    } else {
      console.error(`       - ${error.message}`);
    }
    return `[–û–®–ò–ë–ö–ê –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò –ß–ê–ù–ö–ê: ${chunkFilename}]`;
  }
}

/**
 * Split audio file into chunks by size.
 * @param {string} inputPath - Path to source file.
 * @param {string} outputDir - Directory to save chunks.
 * @param {number} duration - Total audio duration in seconds.
 * @param {number} fileSize - File size in bytes.
 * @param {number} targetChunkSizeBytes - Target chunk size in bytes.
 * @returns {Promise<string[]>} - Promise with list of chunk paths.
 */
function splitAudioFile(
  inputPath,
  outputDir,
  duration,
  fileSize,
  targetChunkSizeBytes
) {
  return new Promise((resolve, reject) => {
    const numChunks = Math.ceil(fileSize / targetChunkSizeBytes);
    const chunkDuration = Math.floor(duration / numChunks);
    const outputPattern = path.join(
      outputDir,
      `chunk_%03d${path.extname(inputPath)}`
    );
    const chunkPaths = [];

    console.log(
      `    üïí –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ ${numChunks} —á–∞—Å—Ç–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ ${chunkDuration} —Å–µ–∫)...`
    );

    ffmpeg(inputPath)
      .outputOptions([
        "-f segment",
        `-segment_time ${chunkDuration}`,
        "-c copy",
        "-reset_timestamps 1",
      ])
      .output(outputPattern)
      .on("end", () => {
        for (let i = 0; i < numChunks; i++) {
          const chunkName = `chunk_${String(i).padStart(3, "0")}${path.extname(
            inputPath
          )}`;
          const chunkPath = path.join(outputDir, chunkName);
          if (fs.existsSync(chunkPath)) {
            chunkPaths.push(chunkPath);
          } else {
            console.warn(`    ‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–π —á–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${chunkName}`);
          }
        }
        if (chunkPaths.length === 0 && numChunks > 0) {
          return reject(
            new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –¥–ª—è ${inputPath}`)
          );
        }
        console.log(`    ‚úÖ –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${chunkPaths.length} —á–∞—Å—Ç–µ–π.`);
        resolve(chunkPaths);
      })
      .on("error", (err) => {
        reject(
          new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${inputPath}: ${err.message}`)
        );
      })
      .run();
  });
}

/**
 * Transcribe one audio file using OpenAI API, handling large files.
 * @param {string} filePath - Path to audio file.
 * @param {string} outputPath - Path to save transcription text.
 * @param {number} index - File index (for logging).
 * @param {number} totalFiles - Total number of files (for logging).
 */
async function transcribeAudioFile(filePath, outputPath, index, totalFiles) {
  const baseFilename = path.basename(filePath);
  console.log(
    `[${index + 1}/${totalFiles}] üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è —Ñ–∞–π–ª–∞: ${baseFilename}`
  );

  let tempDir = null;
  try {
    const { duration, size } = await getAudioMetadata(filePath);
    console.log(
      `[${index + 1}/${totalFiles}] ‚ÑπÔ∏è  –†–∞–∑–º–µ—Ä: ${(size / 1024 / 1024).toFixed(
        2
      )} MB, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(duration / 60)}m ${Math.round(
        duration % 60
      )}s`
    );

    let transcript = "";

    if (size > MAX_FILE_SIZE) {
      console.log(
        `[${index + 1}/${totalFiles}] üêò –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(
          size /
          1024 /
          1024
        ).toFixed(2)} MB > ${OPENAI_API_LIMIT_MB} MB), —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.`
      );

      tempDir = fs.mkdtempSync(
        path.join(os.tmpdir(), `whisper-chunks-${Date.now()}-`)
      );
      console.log(
        `[${
          index + 1
        }/${totalFiles}] üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${tempDir}`
      );

      const chunkPaths = await splitAudioFile(
        filePath,
        tempDir,
        duration,
        size,
        TARGET_CHUNK_SIZE_BYTES
      );

      if (!chunkPaths || chunkPaths.length === 0) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏.");
      }

      const transcriptParts = [];
      for (let i = 0; i < chunkPaths.length; i++) {
        console.log(
          `[${index + 1}/${totalFiles}] üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${
            chunkPaths.length
          }...`
        );
        const chunkPath = chunkPaths[i];
        try {
          const part = await transcribeChunk(chunkPath, OPENAI_API_KEY);
          transcriptParts.push(part);
        } catch (chunkError) {
          console.error(
            `[${index + 1}/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${
              i + 1
            }: ${chunkError.message}`
          );
          transcriptParts.push(`[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ß–ê–ù–ö–ê ${i + 1}]`);
        }
      }

      transcript = transcriptParts.join("\n\n");
      console.log(
        `[${
          index + 1
        }/${totalFiles}] ‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ ${baseFilename} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.`
      );
    } else {
      console.log(
        `[${
          index + 1
        }/${totalFiles}] üëå –§–∞–π–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏–∫–æ–º...`
      );
      transcript = await transcribeChunk(filePath, OPENAI_API_KEY);
      console.log(
        `[${
          index + 1
        }/${totalFiles}] ‚úÖ –§–∞–π–ª ${baseFilename} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω.`
      );
    }

    fs.writeFileSync(outputPath, transcript, "utf8");
    console.log(
      `[${
        index + 1
      }/${totalFiles}] üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${path.basename(
        outputPath
      )}`
    );
  } catch (error) {
    console.error(
      `[${
        index + 1
      }/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${baseFilename}:`
    );
    if (error.response) {
      console.error(`   - –°—Ç–∞—Ç—É—Å API: ${error.response.status}`);
      console.error(`   - –û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`);
    } else if (error.request) {
      console.error("   - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.");
    } else {
      console.error(`   - ${error.message}`);
      if (error.stack) {
        console.error(error.stack);
      }
    }
  } finally {
    if (tempDir) {
      try {
        console.log(
          `[${
            index + 1
          }/${totalFiles}] üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ ${tempDir}...`
        );
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log(`[${index + 1}/${totalFiles}] ‚ú® –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.`);
      } catch (cleanupError) {
        console.error(
          `[${
            index + 1
          }/${totalFiles}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${tempDir}: ${
            cleanupError.message
          }`
        );
      }
    }
  }
}

/**
 * Process one video file: extract audio and transcribe.
 * @param {string} videoPath - Path to video file.
 * @param {number} index - File index (for logging).
 * @param {number} totalFiles - Total number of files (for logging).
 */
async function processVideoFile(videoPath, index, totalFiles) {
  const videoBasename = path.basename(videoPath);
  const videoName = path.basename(videoPath, path.extname(videoPath));

  console.log(
    `\n[${index + 1}/${totalFiles}] ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: ${videoBasename}`
  );

  // Define output paths
  const audioPath = path.join(AUDIO_DIR, `${videoName}.mp3`);
  const textPath = path.join(TEXT_DIR, `${videoName}.txt`);

  // Check if already processed
  if (fs.existsSync(textPath)) {
    console.log(
      `[${
        index + 1
      }/${totalFiles}] ‚è≠Ô∏è  –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫: ${videoBasename}`
    );
    return;
  }

  try {
    // Step 1: Extract audio if not already done
    if (!fs.existsSync(audioPath)) {
      await extractAudio(videoPath, audioPath);
    } else {
      console.log(
        `[${
          index + 1
        }/${totalFiles}] üìÅ –ê—É–¥–∏–æ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${path.basename(
          audioPath
        )}`
      );
    }

    // Step 2: Transcribe audio
    await transcribeAudioFile(audioPath, textPath, index, totalFiles);

    console.log(
      `[${index + 1}/${totalFiles}] ‚úÖ –í–∏–¥–µ–æ ${videoBasename} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.`
    );
  } catch (error) {
    console.error(
      `[${
        index + 1
      }/${totalFiles}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ ${videoBasename}:`
    );
    console.error(`   - ${error.message}`);
  }
}

/**
 * Main function to process all videos.
 */
async function main() {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...`);

  // Check API key
  if (!OPENAI_API_KEY) {
    console.error(
      "‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ .env –∫–∞–∫ OPENAI_API_KEY."
    );
    return;
  }

  // Create directories if they don't exist
  [VIDEO_DIR, AUDIO_DIR, TEXT_DIR].forEach((dir) => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dir}`);
    }
  });

  // Get all video files
  const videoFiles = getVideoFiles();

  if (videoFiles.length === 0) {
    console.log(
      `üü° –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ ${VIDEO_DIR}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: ${VIDEO_EXTENSIONS.join(
        ", "
      )}`
    );
    return;
  }

  console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: ${videoFiles.length}`);

  // Process each video file
  const totalFiles = videoFiles.length;
  for (let i = 0; i < totalFiles; i++) {
    await processVideoFile(videoFiles[i], i, totalFiles);
    console.log(`---`);
  }

  console.log(`üèÅ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
}

// Run main function
main().catch((err) => {
  console.error("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", err);
});
