import fs from "fs/promises"; // Using promises for async file operations
import path from "path";
import axios from "axios";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from "dotenv";
dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = "gpt-4o"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å GPT-4o
const DELAY_BETWEEN_REQUESTS_MS = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API

// --- –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ---
// –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º .txt, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
const filesToProcess = [
  "/Users/kossakovsky/Library/CloudStorage/GoogleDrive-kossakovsky93@gmail.com/My Drive/Automatica n8n/flowise/Automatica fw lessons/Automatica_#1.txt",
];

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏.
 * @param {number} ms - –í—Ä–µ–º—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
 */
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —á–∞–Ω–∫ —Ç–µ–∫—Å—Ç–∞ –≤ OpenAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * @param {string} textChunk - –ß–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
 * @param {string} systemPrompt - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏.
 * @param {number} fileIndex - –ò–Ω–¥–µ–∫—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
 * @param {number} totalFiles - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤.
 * @param {number} chunkIndex - –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞ (1 or 2).
 * @param {number} totalChunks - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ (always 2).
 * @returns {Promise<string>} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∞–Ω–∫–∞.
 */
async function processTextChunk(
  textChunk,
  systemPrompt,
  fileIndex,
  totalFiles,
  chunkIndex,
  totalChunks
) {
  console.log(
    `[${
      fileIndex + 1
    }/${totalFiles}] [–ß–∞—Å—Ç—å ${chunkIndex}/${totalChunks}] ‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenAI (${OPENAI_MODEL})...`
  );
  try {
    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: OPENAI_MODEL,
        messages: [
          {
            role: "system",
            content: systemPrompt,
          },
          {
            role: "user",
            content: textChunk,
          },
        ],
        temperature: 0.2,
      },
      {
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        timeout: 300000, // 5 –º–∏–Ω—É—Ç
      }
    );

    if (
      !response.data ||
      !response.data.choices ||
      response.data.choices.length === 0 ||
      !response.data.choices[0].message ||
      !response.data.choices[0].message.content
    ) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API –¥–ª—è —á–∞–Ω–∫–∞");
    }
    const processedChunk = response.data.choices[0].message.content.trim();
    console.log(
      `[${
        fileIndex + 1
      }/${totalFiles}] [–ß–∞—Å—Ç—å ${chunkIndex}/${totalChunks}] ‚úÖ –ß–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.`
    );
    return processedChunk;
  } catch (error) {
    console.error(
      `[${
        fileIndex + 1
      }/${totalFiles}] [–ß–∞—Å—Ç—å ${chunkIndex}/${totalChunks}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å—Ç–∏:`
    );
    if (error.response) {
      console.error(`   - –°—Ç–∞—Ç—É—Å API: ${error.response.status}`);
      console.error(`   - –û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`);
    } else if (error.request) {
      console.error("   - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.");
    } else {
      console.error(`   - ${error.message}`);
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ä–∫–µ—Ä –æ—à–∏–±–∫–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ —á–∞–Ω–∫–∞
    return `[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ß–ê–°–¢–ò ${chunkIndex}/${totalChunks}]`;
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (.txt).
 * @param {number} index - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞.
 * @param {number} totalFiles - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤.
 */
async function processTranscriptFile(filePath, index, totalFiles) {
  const baseFilename = path.basename(filePath);
  const outputFilename = `${path.basename(filePath, ".txt")}_roles.txt`;
  const outputPath = path.join(path.dirname(filePath), outputFilename);

  console.log(
    `[${index + 1}/${totalFiles}] ‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${baseFilename}`
  );

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    try {
      await fs.access(filePath);
    } catch {
      console.error(
        `[${
          index + 1
        }/${totalFiles}] ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å): ${filePath}`
      );
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
    }

    // 1. –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    const transcriptText = await fs.readFile(filePath, "utf8");
    if (!transcriptText.trim()) {
      console.log(
        `[${index + 1}/${totalFiles}] ‚ö†Ô∏è –§–∞–π–ª ${baseFilename} –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫.`
      );
      return;
    }
    console.log(
      `[${index + 1}/${totalFiles}] üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ (${
        transcriptText.length
      } —Å–∏–º–≤–æ–ª–æ–≤).`
    );

    // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
    const systemPrompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ª–µ–∫—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–æ–ª–∏ –≥–æ–≤–æ—Ä—è—â–∏—Ö. –û—Å–Ω–æ–≤–Ω–æ–π –≥–æ–≤–æ—Ä—è—â–∏–π - –õ–µ–∫—Ç–æ—Ä. –ò–Ω–æ–≥–¥–∞ –°—Ç—É–¥–µ–Ω—Ç—ã –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–µ–ª–∞—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∞ –õ–µ–∫—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π —Å–ª–µ–¥—É—é—â—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ª–µ–∫—Ü–∏–∏. –û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç —Ä–µ—á–∏ –∏ —á–µ—Ç–∫–æ –ø–æ–º–µ—Ç—å –µ–≥–æ –∫–∞–∫ [–õ–µ–∫—Ç–æ—Ä], [–°—Ç—É–¥–µ–Ω—Ç - –í–æ–ø—Ä–æ—Å], [–°—Ç—É–¥–µ–Ω—Ç - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π] –∏–ª–∏ [–õ–µ–∫—Ç–æ—Ä - –û—Ç–≤–µ—Ç]. –°–æ—Ö—Ä–∞–Ω—è–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ, –≤—Å—Ç–∞–≤–ª—è—è –º–µ—Ç–∫–∏ —Ä–æ–ª–µ–π –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–µ–≥–º–µ–Ω—Ç–æ–º —Ä–µ—á–∏.
- –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç - —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–µ—á–∏ –ª–µ–∫—Ç–æ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π [–õ–µ–∫—Ç–æ—Ä].
- –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —á—Ç–æ-—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π [–°—Ç—É–¥–µ–Ω—Ç - –í–æ–ø—Ä–æ—Å].
- –ï—Å–ª–∏ –ª–µ–∫—Ç–æ—Ä –ø—Ä—è–º–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–π [–õ–µ–∫—Ç–æ—Ä - –û—Ç–≤–µ—Ç].
- –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏–π—Å—è –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π [–°—Ç—É–¥–µ–Ω—Ç - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π].
- –ï—Å–ª–∏ —Ä–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Å—Ç–∞–≤—å —Å–µ–≥–º–µ–Ω—Ç –±–µ–∑ –º–µ—Ç–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ].
–í–∞–∂–Ω–æ: –í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∫–∞–º–∏, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π.`;

    // 3. –†–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
    console.log(
      `[${index + 1}/${totalFiles}] ‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ 2 —á–∞—Å—Ç–∏...`
    );
    const midpoint = Math.floor(transcriptText.length / 2);
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω–µ—Ü –∞–±–∑–∞—Ü–∞ (\n\n) –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (. ) –ø–µ—Ä–µ–¥ —Å–µ—Ä–µ–¥–∏–Ω–æ–π
    let breakPoint = transcriptText.lastIndexOf("\n\n", midpoint);
    if (breakPoint === -1) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –∞–±–∑–∞—Ü–µ–≤, –∏—â–µ–º –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      breakPoint = transcriptText.lastIndexOf(". ", midpoint);
    }
    if (
      breakPoint === -1 ||
      midpoint - breakPoint > transcriptText.length * 0.2
    ) {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑—Ä—ã–≤ –∏–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ, –¥–µ–ª–∏–º –ø—Ä–æ—Å—Ç–æ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω–µ
      breakPoint = midpoint;
      console.warn(
        `[${
          index + 1
        }/${totalFiles}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∑—Ä—ã–≤ —É —Å–µ—Ä–µ–¥–∏–Ω—ã, –¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É.`
      );
    } else {
      // –°–º–µ—â–∞–µ–º —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∏–ª–∏ —Ç–æ—á–∫–∞ —Å –ø—Ä–æ–±–µ–ª–æ–º)
      breakPoint +=
        transcriptText.substring(breakPoint, breakPoint + 2) === "\n\n" ? 2 : 2;
    }

    const chunk1 = transcriptText.substring(0, breakPoint);
    const chunk2 = transcriptText.substring(breakPoint);

    if (!chunk1.trim() || !chunk2.trim()) {
      console.error(
        `[${
          index + 1
        }/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏.`
      );
      // –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ü–µ–ª–∏–∫–æ–º –∫–∞–∫ fallback?
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
      return;
    }

    console.log(
      `[${index + 1}/${totalFiles}]   - –ß–∞—Å—Ç—å 1: ${chunk1.length} —Å–∏–º–≤–æ–ª–æ–≤`
    );
    console.log(
      `[${index + 1}/${totalFiles}]   - –ß–∞—Å—Ç—å 2: ${chunk2.length} —Å–∏–º–≤–æ–ª–æ–≤`
    );

    // 4. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
    const processedChunks = [];

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    const processedChunk1 = await processTextChunk(
      chunk1,
      systemPrompt,
      index,
      totalFiles,
      1,
      2
    );
    processedChunks.push(processedChunk1);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç—å—é
    console.log(
      `[${index + 1}/${totalFiles}] ‚è≥ –ü–∞—É–∑–∞ ${
        DELAY_BETWEEN_REQUESTS_MS / 1000
      } —Å–µ–∫...`
    );
    await delay(DELAY_BETWEEN_REQUESTS_MS);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    const processedChunk2 = await processTextChunk(
      chunk2,
      systemPrompt,
      index,
      totalFiles,
      2,
      2
    );
    processedChunks.push(processedChunk2);

    // 5. –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    // Use double newline as separator always for simplicity, even if one part failed
    const finalProcessedText = processedChunks.join("\n\n");

    console.log(
      `[${
        index + 1
      }/${totalFiles}] ‚úÖ –§–∞–π–ª ${baseFilename} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω.`
    );

    await fs.writeFile(outputPath, finalProcessedText, "utf8");
    console.log(
      `[${index + 1}/${totalFiles}] üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFilename}`
    );
  } catch (error) {
    // –û—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å API
    console.error(
      `[${
        index + 1
      }/${totalFiles}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${baseFilename}:`,
      error.message
    );
    // –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —á–∞–Ω–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ processTextChunk
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π.
 */
async function main() {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ —Ä–æ–ª—è–º...`);

  if (!OPENAI_API_KEY) {
    console.error(
      "‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ .env –∫–∞–∫ OPENAI_API_KEY."
    );
    return;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ filesToProcess
  if (!filesToProcess || filesToProcess.length === 0) {
    console.log(
      "üü° –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (filesToProcess) –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø—É—Ç–∏ –∫ .txt —Ñ–∞–π–ª–∞–º –≤ —Å–∫—Ä–∏–ø—Ç."
    );
    return;
  }

  console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${filesToProcess.length}`);

  const totalFiles = filesToProcess.length;
  for (let i = 0; i < totalFiles; i++) {
    await processTranscriptFile(filesToProcess[i], i, totalFiles);
    // –î–æ–±–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –∏ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    if (i < totalFiles - 1) {
      console.log(`---`);
      console.log(
        `‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ñ–∞–π–ª–æ–º ${
          DELAY_BETWEEN_REQUESTS_MS / 1000
        } —Å–µ–∫...`
      );
      await delay(DELAY_BETWEEN_REQUESTS_MS);
    } else {
      console.log(`---`);
    }
  }

  console.log(`üèÅ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch((err) => {
  console.error("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", err);
});
