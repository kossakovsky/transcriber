import fs from "fs";
import path from "path";
import os from "os"; // Needed for temporary directory
import axios from "axios";
import FormData from "form-data";
import ffmpeg from "fluent-ffmpeg";
import ffmpegInstaller from "@ffmpeg-installer/ffmpeg";

// Tell fluent-ffmpeg where to find the ffmpeg binary
ffmpeg.setFfmpegPath(ffmpegInstaller.path);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
import dotenv from "dotenv";
dotenv.config();

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---

// !!! –í–ê–ñ–ù–û: –•—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ.
// –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á –∏–∑ process.env.OPENAI_API_KEY (–∏–∑ —Ñ–∞–π–ª–∞ .env)
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_API_LIMIT_MB = 25; // OpenAI API limit in MB
const CHUNK_SIZE_MB = 20; // Target chunk size in MB (slightly less than the limit)
const MAX_FILE_SIZE = OPENAI_API_LIMIT_MB * 1024 * 1024;
const TARGET_CHUNK_SIZE_BYTES = CHUNK_SIZE_MB * 1024 * 1024;

// –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ 5 —Ñ–∞–π–ª–∞–º MP3
const filesToTranscribe = [
  "/Users/kossakovsky/Library/CloudStorage/GoogleDrive-kossakovsky93@gmail.com/My Drive/Automatica n8n/flowise/Automatica fw lessons/Automatica_#1.mp3",
];

// --- –§—É–Ω–∫—Ü–∏–∏ ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–∑–º–µ—Ä).
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 * @returns {Promise<object>} - –ü—Ä–æ–º–∏—Å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ { duration, size }.
 */
function getAudioMetadata(filePath) {
  return new Promise((resolve, reject) => {
    ffmpeg.ffprobe(filePath, (err, metadata) => {
      if (err) {
        return reject(
          new Error(
            `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ${filePath}: ${err.message}`
          )
        );
      }
      const duration = metadata.format.duration;
      const size = metadata.format.size;
      if (duration === undefined || size === undefined) {
        return reject(
          new Error(
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è ${filePath}`
          )
        );
      }
      resolve({ duration, size });
    });
  });
}

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –Ω–µ–±–æ–ª—å—à–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (—á–∞—Å—Ç—å).
 * @param {string} filePath - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–∏–ª–∏ —á–∞–Ω–∫—É).
 * @param {string} apiKey - API –∫–ª—é—á OpenAI.
 * @returns {Promise<string>} - –ü—Ä–æ–º–∏—Å —Å —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
 */
async function transcribeChunk(filePath, apiKey) {
  const chunkFilename = path.basename(filePath);
  console.log(`    ‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞ ${chunkFilename} –≤ OpenAI API...`);
  const formData = new FormData();
  formData.append("file", fs.createReadStream(filePath));
  formData.append("model", "whisper-1");
  formData.append("language", "ru");

  try {
    const response = await axios.post(
      "https://api.openai.com/v1/audio/transcriptions",
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          Authorization: `Bearer ${apiKey}`,
        },
        // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–æ–≤
        timeout: 600000, // 10 –º–∏–Ω—É—Ç
      }
    );
    console.log(`    ‚úÖ –ß–∞–Ω–∫ ${chunkFilename} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω.`);
    return response.data.text;
  } catch (error) {
    console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ ${chunkFilename}:`);
    if (error.response) {
      console.error(`       - –°—Ç–∞—Ç—É—Å API: ${error.response.status}`);
      console.error(
        `       - –û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`
      );
    } else if (error.request) {
      console.error("       - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.");
    } else {
      console.error(`       - ${error.message}`);
    }
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –º–∞—Ä–∫–µ—Ä –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    return `[–û–®–ò–ë–ö–ê –¢–†–ê–ù–°–ö–†–ò–ë–ê–¶–ò–ò –ß–ê–ù–ö–ê: ${chunkFilename}]`;
  }
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É.
 * @param {string} inputPath - –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É.
 * @param {string} outputDir - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤.
 * @param {number} duration - –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
 * @param {number} fileSize - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö.
 * @param {number} targetChunkSizeBytes - –ñ–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ –±–∞–π—Ç–∞—Ö.
 * @returns {Promise<string[]>} - –ü—Ä–æ–º–∏—Å —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —á–∞–Ω–∫–∞–º.
 */
function splitAudioFile(
  inputPath,
  outputDir,
  duration,
  fileSize,
  targetChunkSizeBytes
) {
  return new Promise((resolve, reject) => {
    const numChunks = Math.ceil(fileSize / targetChunkSizeBytes);
    const chunkDuration = Math.floor(duration / numChunks); // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    const outputPattern = path.join(
      outputDir,
      `chunk_%03d${path.extname(inputPath)}`
    );
    const chunkPaths = [];

    console.log(
      `    üïí –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ ${numChunks} —á–∞—Å—Ç–µ–π (–ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ ${chunkDuration} —Å–µ–∫)...`
    );

    ffmpeg(inputPath)
      .outputOptions([
        "-f segment", // –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ - —Å–µ–≥–º–µ–Ω—Ç—ã
        `-segment_time ${chunkDuration}`, // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        "-c copy", // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥–µ–∫ (–±—ã—Å—Ç—Ä–µ–µ, –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
        "-reset_timestamps 1", // –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
      ])
      .output(outputPattern)
      .on("end", () => {
        // –°–æ–±–∏—Ä–∞–µ–º –∏–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for (let i = 0; i < numChunks; i++) {
          const chunkName = `chunk_${String(i).padStart(3, "0")}${path.extname(
            inputPath
          )}`;
          const chunkPath = path.join(outputDir, chunkName);
          if (fs.existsSync(chunkPath)) {
            chunkPaths.push(chunkPath);
          } else {
            // –ú–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –∫–æ—Ä–æ—á–µ
            console.warn(`    ‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–π —á–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${chunkName}`);
          }
        }
        if (chunkPaths.length === 0 && numChunks > 0) {
          return reject(
            new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –¥–ª—è ${inputPath}`)
          );
        }
        console.log(`    ‚úÖ –§–∞–π–ª —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ ${chunkPaths.length} —á–∞—Å—Ç–µ–π.`);
        resolve(chunkPaths);
      })
      .on("error", (err) => {
        reject(
          new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${inputPath}: ${err.message}`)
        );
      })
      .run();
  });
}

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é OpenAI API, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã.
 * @param {string} filePath - –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É.
 * @param {number} index - –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).
 * @param {number} totalFiles - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).
 */
async function transcribeFile(filePath, index, totalFiles) {
  const baseFilename = path.basename(filePath);
  console.log(
    `[${index + 1}/${totalFiles}] ‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: ${baseFilename}`
  );

  let tempDir = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if (!fs.existsSync(filePath)) {
      console.error(
        `[${index + 1}/${totalFiles}] ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`
      );
      return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
    }

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
    const { duration, size } = await getAudioMetadata(filePath);
    console.log(
      `[${index + 1}/${totalFiles}] ‚ÑπÔ∏è  –†–∞–∑–º–µ—Ä: ${(size / 1024 / 1024).toFixed(
        2
      )} MB, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.floor(duration / 60)}m ${Math.round(
        duration % 60
      )}s`
    );

    let transcript = "";

    if (size > MAX_FILE_SIZE) {
      console.log(
        `[${index + 1}/${totalFiles}] üêò –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (${(
          size /
          1024 /
          1024
        ).toFixed(2)} MB > ${OPENAI_API_LIMIT_MB} MB), —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ.`
      );

      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      tempDir = fs.mkdtempSync(
        path.join(os.tmpdir(), `whisper-chunks-${Date.now()}-`)
      );
      console.log(
        `[${
          index + 1
        }/${totalFiles}] üìÅ –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${tempDir}`
      );

      // –†–∞–∑–¥–µ–ª—è–µ–º —Ñ–∞–π–ª
      const chunkPaths = await splitAudioFile(
        filePath,
        tempDir,
        duration,
        size,
        TARGET_CHUNK_SIZE_BYTES
      );

      if (!chunkPaths || chunkPaths.length === 0) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏.");
      }

      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
      const transcriptParts = [];
      for (let i = 0; i < chunkPaths.length; i++) {
        console.log(
          `[${index + 1}/${totalFiles}] üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ ${i + 1} –∏–∑ ${
            chunkPaths.length
          }...`
        );
        const chunkPath = chunkPaths[i];
        try {
          const part = await transcribeChunk(chunkPath, OPENAI_API_KEY);
          transcriptParts.push(part);
        } catch (chunkError) {
          console.error(
            `[${index + 1}/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ ${
              i + 1
            }: ${chunkError.message}`
          );
          // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –æ—à–∏–±–∫–∏ –≤ –∏—Ç–æ–≥–æ–≤—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
          transcriptParts.push(`[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ß–ê–ù–ö–ê ${i + 1}]`);
          // –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –ª–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å
          // continue;
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      transcript = transcriptParts.join("\n\n"); // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
      console.log(
        `[${
          index + 1
        }/${totalFiles}] ‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ ${baseFilename} —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã.`
      );
    } else {
      // –§–∞–π–ª –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–π, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
      console.log(
        `[${
          index + 1
        }/${totalFiles}] üëå –§–∞–π–ª –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–ª–∏–∫–æ–º...`
      );
      transcript = await transcribeChunk(filePath, OPENAI_API_KEY); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é
      console.log(
        `[${
          index + 1
        }/${totalFiles}] ‚úÖ –§–∞–π–ª ${baseFilename} —É—Å–ø–µ—à–Ω–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω.`
      );
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    const outputFilename = `${path.basename(
      filePath,
      path.extname(filePath) // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    )}.txt`;
    const outputPath = path.join(path.dirname(filePath), outputFilename); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)

    fs.writeFileSync(outputPath, transcript, "utf8");
    console.log(
      `[${
        index + 1
      }/${totalFiles}] üíæ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${outputFilename}`
    );
  } catch (error) {
    console.error(
      `[${
        index + 1
      }/${totalFiles}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${baseFilename}:`
    );
    if (error.response) {
      // –û—à–∏–±–∫–∏ axios/OpenAI
      console.error(`   - –°—Ç–∞—Ç—É—Å API: ${error.response.status}`);
      console.error(`   - –û—Ç–≤–µ—Ç API: ${JSON.stringify(error.response.data)}`);
    } else if (error.request) {
      // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
      console.error("   - –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ OpenAI.");
    } else {
      // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ (ffmpeg, —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏ —Ç.–¥.)
      console.error(`   - ${error.message}`);
      // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è ffmpeg –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
      if (error.stack) {
        console.error(error.stack);
      }
    }
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
    if (tempDir) {
      try {
        console.log(
          `[${
            index + 1
          }/${totalFiles}] üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ ${tempDir}...`
        );
        fs.rmSync(tempDir, { recursive: true, force: true });
        console.log(`[${index + 1}/${totalFiles}] ‚ú® –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.`);
      } catch (cleanupError) {
        console.error(
          `[${
            index + 1
          }/${totalFiles}] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${tempDir}: ${
            cleanupError.message
          }`
        );
      }
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.
 */
async function main() {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...`);
  console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${filesToTranscribe.length}`);

  if (!OPENAI_API_KEY) {
    console.error(
      "‚ùå –û–®–ò–ë–ö–ê: API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–¥–∞–Ω –≤ —Ñ–∞–π–ª–µ .env –∫–∞–∫ OPENAI_API_KEY."
    );
    return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∫–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º
  }

  const totalFiles = filesToTranscribe.length;
  for (let i = 0; i < totalFiles; i++) {
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ
    // const filePath = path.resolve(filesToTranscribe[i]);
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å, —Ç.–∫. –æ–Ω —É–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
    const filePath = filesToTranscribe[i];
    await transcribeFile(filePath, i, totalFiles);
    console.log(`---`); // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏
  }

  console.log(`üèÅ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.`);
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main().catch((err) => {
  console.error("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:", err);
});
